# set xmake config root
IF(NOT CMAKE_CONFIG_ROOT)
	SET (CMAKE_CONFIG_ROOT /etc/cmake)
ENDIF()

# include needed files
INCLUDE (${CMAKE_CONFIG_ROOT}/function.cmake)
INCLUDE (${CMAKE_CONFIG_ROOT}/common.cmake)

# cmake required version
CMAKE_MINIMUM_REQUIRED(VERSION 3.5.1)

#set default options
option(ENABLE_EXE_MODE "enable exe mode" OFF)
#<OPTIONS-END>

# include toolchain file
IF(EXISTS ${CMAKE_TOOLCHAIN_FILE})
	INCLUDE (${CMAKE_TOOLCHAIN_FILE})
ENDIF()

#get gcc version for variable GCC_VERSION
get_gcc_version()

# set project type
SET(PROJECT_TYPE standard)

# enable cmake options
#SET(CMAKE_VERBOSE_MAKEFILE ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# set compiler options
#SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -rdynamic")
#SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -include <header-file>")
#SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -E")
#SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -rdynamic")
#SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -include <header-file>")
#<FLAGS-END>


#middleware directory
SET(MIDDLEWARE_ROOT "$ENV{MIDDLEWARE_ROOT}")
SET(MIDDLEWARE_I2T "$ENV{MIDDLEWARE_I2T}")

if(NOT MIDDLEWARE_ROOT)
	SET (MIDDLEWARE_ROOT /opt/middleware)
ENDIF ()
SET (DIR_MIDDLEWARE "${MIDDLEWARE_ROOT}/${BUILD_PLATFORM}")
SET (DIR_MIDDLEWARE_I2T "${MIDDLEWARE_I2T}/${BUILD_PLATFORM}")

# add common gcc configs
ADD_DEFINITIONS(-D${BUILD_PURPOSE})
#ADD_DEFINITIONS(-fopenmp)
ADD_DEFINITIONS(-Wno-deprecated)
#ADD_DEFINITIONS(-Wno-unused-variable)
#ADD_DEFINITIONS(-Wno-unused-but-set-variable)
ADD_DEFINITIONS (-D_LINUX_)
IF(arm9 STREQUAL ${BUILD_PLATFORM})
	ADD_DEFINITIONS(-D__STDC_FORMAT_MACROS)
	MESSAGE("__STDC_FORMAT_MACROS ON")
ENDIF()

# add special gcc configs for version 7.5 or later
IF(GCC_VERSION GREATER_EQUAL "7.5")
	MESSAGE("== HIGH GCC VERSION ${GCC_VERSION}")
	ADD_DEFINITIONS(-Wno-stringop-truncation)
	ADD_DEFINITIONS(-Wno-stringop-overflow)
	ADD_DEFINITIONS(-Wno-format-overflow)
	ADD_DEFINITIONS(-Wno-psabi)
ENDIF()

#include directories
INCLUDE_DIRECTORIES(.)
MESSAGE("DIR_MIDDLEWARE = ${DIR_MIDDLEWARE}")
INCLUDE_DIRECTORIES(${DIR_MIDDLEWARE}/include)
INCLUDE_DIRECTORIES(${DIR_MIDDLEWARE_I2T}/include)
#INCLUDE_DIRECTORIES(<directory> ...)
IF(a8plus STREQUAL ${BUILD_PLATFORM})
	INCLUDE_DIRECTORIES(${ADDITIONAL_INCLUDE_DIRECTORIES})
	message("${ADDITIONAL_INCLUDE_DIRECTORIES}")
ENDIF()

#link directories
LINK_DIRECTORIES(${DIR_MIDDLEWARE}/lib)
LINK_DIRECTORIES(${DIR_MIDDLEWARE_I2T}/lib)
#LINK_DIRECTORIES(<directory> ...)
IF(a8plus STREQUAL ${BUILD_PLATFORM})
	LINK_DIRECTORIES(${ADDITIONAL_LINK_DIRECTORIES})
	message("${ADDITIONAL_LINK_DIRECTORIES}")
ENDIF()

# get source subdirs
SET(SOURCE_SUBDIR_EXCLUDE .svn .git)
FILE(GLOB_RECURSE ALL_FILE RELATIVE ${CMAKE_SOURCE_DIR} *)
FOREACH (_VAR ${ALL_FILE})

	STRING(FIND ${_VAR} "/" _INDEX)
	IF(_INDEX LESS 0)
		CONTINUE()
	ENDIF()	
	STRING(REGEX REPLACE "(.*)/.*" \\1 _VAR ${_VAR})
	
	SET(APPEND_FLAG 1)
	FOREACH(_VAR_EXCLUDE ${SOURCE_SUBDIR_EXCLUDE})
		STRING(FIND ${_VAR} ${_VAR_EXCLUDE} _INDEX)
		IF(_INDEX EQUAL 0)
			SET(APPEND_FLAG 0)
		ENDIF()
	ENDFOREACH ()

	IF(APPEND_FLAG)
		LIST(FIND CMAKE_SOURCE_SUBDIR ${_VAR} _INDEX)
		IF(_INDEX LESS 0)
			LIST(APPEND CMAKE_SOURCE_SUBDIR ${_VAR})
		ENDIF()
	ENDIF()
ENDFOREACH ()
LIST(LENGTH CMAKE_SOURCE_SUBDIR _SUBDIR_COUNT)
IF(_SUBDIR_COUNT GREATER 0)
	LIST(SORT CMAKE_SOURCE_SUBDIR)
ENDIF()
MESSAGE("CMAKE_SOURCE_SUBDIR = ${CMAKE_SOURCE_SUBDIR}")

#source files
AUX_SOURCE_DIRECTORY(${CMAKE_SOURCE_DIR} SOURCE_FILES)
FOREACH (_VAR ${CMAKE_SOURCE_SUBDIR})
	AUX_SOURCE_DIRECTORY (${CMAKE_SOURCE_DIR}/${_VAR} SOURCE_FILES)
ENDFOREACH ()

#check exe mode and main.cpp file
SET(FILE_MAIN_CPP "${CMAKE_SOURCE_DIR}/main.cpp")
IF(ENABLE_EXE_MODE)
	IF(NOT EXISTS "${FILE_MAIN_CPP}")
		SET(ENABLE_EXE_MODE OFF)
	ENDIF()
ELSE()
	IF(EXISTS "${FILE_MAIN_CPP}")
		LIST(REMOVE_ITEM SOURCE_FILES "${FILE_MAIN_CPP}")
	ENDIF()	
ENDIF()

#add target
IF(ENABLE_EXE_MODE)
	ADD_EXECUTABLE(${TARGET_NAME} ${SOURCE_FILES})
ELSE()
	ADD_LIBRARY(${TARGET_NAME} SHARED ${SOURCE_FILES})
	
	#set lib version
	SET(VERSION_FILE ${CMAKE_SOURCE_DIR}/version.cmake)
	IF(EXISTS ${VERSION_FILE})
		INCLUDE (${VERSION_FILE})
	ELSE()
		SET(VERSION_MAJOR 0)
		SET(VERSION_MINOR 0)
		SET(VERSION_PATCH 0)		
	ENDIF()
	# SET(VERSION_FULL ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})
	# SET_TARGET_PROPERTIES(${TARGET_NAME} PROPERTIES VERSION ${VERSION_FULL} SOVERSION ${VERSION_MAJOR})
ENDIF()

#link libraries
#LIST(APPEND LINK_LIBS <library1> <library2> ...)
IF(a8plus STREQUAL ${BUILD_PLATFORM})
	LIST(APPEND LINK_LIBS rt libstdc++.a)
ENDIF()
IF(a7 STREQUAL ${BUILD_PLATFORM} OR arm9 STREQUAL ${BUILD_PLATFORM})
	LIST(APPEND LINK_LIBS boost_regex)
ENDIF()

TARGET_LINK_LIBRARIES(${TARGET_NAME} ${LINK_LIBS}  ProtoXML qrencode platform lvgl cbl )

#install target
IF (DIR_MIDDLEWARE)
	SET (CMAKE_INSTALL_PREFIX ${DIR_MIDDLEWARE})
	INCLUDE (${CMAKE_CONFIG_ROOT}/install_lib.cmake)
ENDIF ()
